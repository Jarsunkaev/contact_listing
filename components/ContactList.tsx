import React, { useState } from 'react';
import Image from 'next/image';
import EditContactModal from './EditContactModal';

const dummyContacts = [
  { id: 1, name: 'Timothy Lewis', phone: '(254) 555-0123', image: null },
  { id: 2, name: 'Sarah Wright', phone: '(555) 123-4567', image: null },
  { id: 3, name: 'Lucy Jones', phone: '(555) 987-6543', image: null },
  { id: 4, name: 'John Perez', phone: '(555) 246-8102', image: null },
  { id: 5, name: 'Anthony Rodriguez', phone: '(555) 369-2580', image: null },
];

const BellIcon = () => (
  <div className="flex items-center justify-center w-8 h-8">
     <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
      <path d="M4.2499 18.8748V17.3748H6.2499V10.1248C6.2499 9.8748 6.26657 9.64147 6.2999 9.4248C6.33324 9.20814 6.3749 8.99147 6.4249 8.7748L2.0249 4.3748L3.0999 3.3248L20.9249 21.1498L19.8749 22.2248L16.4999 18.8748H4.2499ZM17.7499 15.1498L16.2499 13.6498V10.1248C16.2499 8.94147 15.8332 7.93714 14.9999 7.1118C14.1666 6.28714 13.1666 5.8748 11.9999 5.8748C11.5332 5.8748 11.0709 5.9538 10.6129 6.1118C10.1542 6.27047 9.7499 6.4998 9.3999 6.7998L8.3249 5.7248C8.6749 5.4248 9.05824 5.17047 9.4749 4.9618C9.89157 4.7538 10.3166 4.5998 10.7499 4.4998V3.7998C10.7499 3.4498 10.8709 3.1538 11.1129 2.9118C11.3542 2.67047 11.6499 2.5498 11.9999 2.5498C12.3499 2.5498 12.6456 2.67047 12.8869 2.9118C13.1289 3.1538 13.2499 3.4498 13.2499 3.7998V4.4998C14.4999 4.78314 15.5626 5.43747 16.4379 6.4628C17.3126 7.48747 17.7499 8.70814 17.7499 10.1248V15.1498ZM11.9999 21.7998C11.4999 21.7998 11.0749 21.6248 10.7249 21.2748C10.3749 20.9248 10.1999 20.4998 10.1999 19.9998H13.7999C13.7999 20.4998 13.6249 20.9248 13.2749 21.2748C12.9249 21.6248 12.4999 21.7998 11.9999 21.7998ZM7.7499 17.3748H14.9749L7.7999 10.1748C7.78324 10.2415 7.7709 10.3121 7.7629 10.3868C7.75424 10.4621 7.7499 10.5331 7.7499 10.5998V17.3748Z" fill="white"/>
    </svg>
  </div>
);

const HeadphoneIcon = () => (
  <div className="flex items-center justify-center w-8 h-8">
    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
      <path d="M5.55 17.5H2.3C1.8 17.5 1.375 17.325 1.025 16.975C0.675 16.625 0.5 16.2 0.5 15.7V9C0.5 7.81667 0.725 6.71267 1.175 5.688C1.625 4.66267 2.23333 3.76667 3 3C3.76667 2.23333 4.66267 1.625 5.688 1.175C6.71267 0.725 7.81667 0.5 9 0.5C10.1833 0.5 11.2873 0.725 12.312 1.175C13.3373 1.625 14.2333 2.23333 15 3C15.7667 3.76667 16.375 4.66267 16.825 5.688C17.275 6.71267 17.5 7.81667 17.5 9V15.7C17.5 16.2 17.325 16.625 16.975 16.975C16.625 17.325 16.2 17.5 15.7 17.5H12.45V10.425H16V9C16 7.05 15.3207 5.39567 13.962 4.037C12.604 2.679 10.95 2 9 2C7.05 2 5.396 2.679 4.038 4.037C2.67933 5.39567 2 7.05 2 9V10.425H5.55V17.5ZM4.05 11.925H2V15.7C2 15.7667 2.03333 15.8333 2.1 15.9C2.16667 15.9667 2.23333 16 2.3 16H4.05V11.925ZM13.95 11.925V16H15.7C15.7667 16 15.8333 15.9667 15.9 15.9C15.9667 15.8333 16 15.7667 16 15.7V11.925H13.95ZM13.95 11.925H16C16 11.925 15.9667 11.925 15.9 11.925C15.8333 11.925 15.7667 11.925 15.7 11.925H13.95ZM4.05 11.925H2.3C2.23333 11.925 2.16667 11.925 2.1 11.925C2.03333 11.925 2 11.925 2 11.925H4.05Z" fill="white"/>
    </svg>
  </div>
);

const ThreeDotIcon = () => (
  <div className="flex items-center justify-center w-8 h-8 rounded-md hover:bg-[#1E1E1E] transition-colors">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none">
      <path d="M7.5 12C7.5 12.8284 6.82843 13.5 6 13.5C5.17157 13.5 4.5 12.8284 4.5 12C4.5 11.1716 5.17157 10.5 6 10.5C6.82843 10.5 7.5 11.1716 7.5 12ZM12 13.5C12.8284 13.5 13.5 12.8284 13.5 12C13.5 11.1716 12.8284 10.5 12 10.5C11.1716 10.5 10.5 11.1716 10.5 12C10.5 12.8284 11.1716 13.5 12 13.5ZM18 13.5C18.8284 13.5 19.5 12.8284 19.5 12C19.5 11.1716 18.8284 10.5 18 10.5C17.1716 10.5 16.5 11.1716 16.5 12C16.5 12.8284 17.1716 13.5 18 13.5Z" fill="white"/>
    </svg>
  </div>
);

const DropdownMenu = ({ isOpen, onClose, onEdit }: { isOpen: boolean; onClose: () => void; onEdit: () => void }) => {
  if (!isOpen) return null;

  return (
    <div className="absolute left-0 top-full mt-2 w-48 bg-[#232323] rounded-md shadow-lg z-10">
  <div className="py-1">
    <button onClick={onEdit} className="flex items-center w-full px-4 py-2 text-sm text-white hover:bg-[#282828]">
      <span className="mr-2 w-5 h-5">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
          <path d="M6.08342 15.9168L5.75008 13.3752C5.52786 13.3057 5.3023 13.2016 5.07342 13.0627C4.84397 12.9238 4.63203 12.7779 4.43758 12.6252L2.08342 13.6252L0.166748 10.2918L2.20842 8.75016C2.18064 8.62516 2.16341 8.50016 2.15675 8.37516C2.14953 8.25016 2.14591 8.12516 2.14591 8.00016C2.14591 7.88905 2.14953 7.771 2.15675 7.646C2.16341 7.521 2.18064 7.38905 2.20842 7.25016L0.166748 5.7085L2.08342 2.396L4.43758 3.37516C4.63203 3.22238 4.84397 3.08016 5.07342 2.9485C5.3023 2.81627 5.52786 2.7085 5.75008 2.62516L6.08342 0.0834961H9.91675L10.2501 2.62516C10.5001 2.72239 10.7256 2.82988 10.9268 2.94766C11.1284 3.066 11.3334 3.2085 11.5417 3.37516L13.9167 2.396L15.8334 5.7085L13.7709 7.271C13.7987 7.40988 13.8126 7.53488 13.8126 7.646C13.8126 7.75711 13.8126 7.87516 13.8126 8.00016C13.8126 8.11127 13.809 8.22572 13.8017 8.3435C13.7951 8.46183 13.7779 8.59738 13.7501 8.75016L15.7917 10.2918L13.8751 13.6252L11.5417 12.6252C11.3334 12.7918 11.1217 12.9377 10.9067 13.0627C10.6912 13.1877 10.4723 13.2918 10.2501 13.3752L9.91675 15.9168H6.08342ZM8.00008 10.5002C8.69453 10.5002 9.2848 10.2571 9.77092 9.771C10.257 9.28488 10.5001 8.69461 10.5001 8.00016C10.5001 7.30572 10.257 6.71544 9.77092 6.22933C9.2848 5.74322 8.69453 5.50016 8.00008 5.50016C7.30564 5.50016 6.71536 5.74322 6.22925 6.22933C5.74314 6.71544 5.50008 7.30572 5.50008 8.00016C5.50008 8.69461 5.74314 9.28488 6.22925 9.771C6.71536 10.2571 7.30564 10.5002 8.00008 10.5002ZM8.00008 9.25016C7.65286 9.25016 7.35786 9.1285 7.11508 8.88516C6.87175 8.64238 6.75008 8.34738 6.75008 8.00016C6.75008 7.65294 6.87175 7.35794 7.11508 7.11516C7.35786 6.87183 7.65286 6.75016 8.00008 6.75016C8.3473 6.75016 8.6423 6.87183 8.88508 7.11516C9.12842 7.35794 9.25008 7.65294 9.25008 8.00016C9.25008 8.34738 9.12842 8.64238 8.88508 8.88516C8.6423 9.1285 8.3473 9.25016 8.00008 9.25016ZM7.16675 14.6668H8.81258L9.10425 12.4377C9.53481 12.3266 9.92369 12.1668 10.2709 11.9585C10.6181 11.7502 10.9584 11.4863 11.2917 11.1668L13.3542 12.0418L14.1876 10.6252L12.3751 9.271C12.4445 9.04877 12.4898 8.8335 12.5109 8.62516C12.5315 8.41683 12.5417 8.2085 12.5417 8.00016C12.5417 7.77794 12.5315 7.56627 12.5109 7.36516C12.4898 7.1635 12.4445 6.9585 12.3751 6.75016L14.1876 5.37516L13.3751 3.9585L11.2709 4.8335C10.9931 4.54183 10.6598 4.28127 10.2709 4.05183C9.88203 3.82294 9.49314 3.65989 9.10425 3.56266L8.83342 1.3335H7.18758L6.89592 3.56266C6.47925 3.65989 6.09036 3.81266 5.72925 4.021C5.36814 4.22933 5.02092 4.49322 4.68758 4.81266L2.62508 3.9585L1.81258 5.37516L3.60425 6.7085C3.5348 6.91683 3.48619 7.12516 3.45842 7.3335C3.43064 7.54183 3.41675 7.76405 3.41675 8.00016C3.41675 8.22238 3.43064 8.43766 3.45842 8.646C3.48619 8.85433 3.5348 9.06266 3.60425 9.271L1.81258 10.6252L2.62508 12.0418L4.68758 11.1668C5.00703 11.4863 5.3473 11.7502 5.70842 11.9585C6.06953 12.1668 6.46536 12.3266 6.89592 12.4377L7.16675 14.6668Z" fill="white" fill-opacity="0.56"/>
          </svg>
      </span>
      Edit
    </button>
    <button className="flex items-center w-full px-4 py-2 text-sm text-white hover:bg-[#282828]">
      <span className="mr-2 w-5 h-5">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
          <path d="M7.99992 15.9375L7.06242 15.1042C4.95131 13.2014 3.2602 11.5486 1.98909 10.1458C0.71853 8.74306 0.083252 7.29167 0.083252 5.79167C0.083252 4.61111 0.482696 3.62139 1.28159 2.8225C2.07992 2.02417 3.06936 1.625 4.24992 1.625C4.91658 1.625 5.57992 1.78111 6.23992 2.09333C6.89936 2.40611 7.48603 2.90972 7.99992 3.60417C8.51381 2.90972 9.10075 2.40611 9.76075 2.09333C10.4202 1.78111 11.0833 1.625 11.7499 1.625C12.9305 1.625 13.9199 2.02417 14.7183 2.8225C15.5171 3.62139 15.9166 4.61111 15.9166 5.79167C15.9166 7.29167 15.281 8.74306 14.0099 10.1458C12.7394 11.5486 11.0485 13.2014 8.93742 15.1042L7.99992 15.9375ZM7.99992 14.25C9.98603 12.4444 11.5938 10.8889 12.8233 9.58333C14.0521 8.27778 14.6666 7.01389 14.6666 5.79167C14.6666 4.95833 14.3888 4.26389 13.8333 3.70833C13.2777 3.15278 12.5833 2.875 11.7499 2.875C11.0971 2.875 10.493 3.05556 9.93742 3.41667C9.38186 3.77778 8.93742 4.30556 8.60408 5H7.39575C7.06242 4.30556 6.61797 3.77778 6.06242 3.41667C5.50686 3.05556 4.9027 2.875 4.24992 2.875C3.41659 2.875 2.72214 3.15278 2.16659 3.70833C1.61103 4.26389 1.33325 4.95833 1.33325 5.79167C1.33325 7.01389 1.94797 8.27778 3.17742 9.58333C4.40631 10.8889 6.01381 12.4444 7.99992 14.25Z" fill="white" fillOpacity="0.56"/>
        </svg>
      </span>
      Favourite
    </button>
    <button className="flex items-center w-full px-4 py-2 text-sm text-white hover:bg-[#282828]">
      <span className="mr-2 w-5 h-5">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none">
        <path d="M8.3 19H15.7C15.7667 19 15.8333 18.9667 15.9 18.9C15.9667 18.8334 16 18.7667 16 18.7V9.00005H8V18.7C8 18.7667 8.03333 18.8334 8.1 18.9C8.16667 18.9667 8.23333 19 8.3 19ZM5.625 6.30005V4.80005H8.6L9.6 3.80005H14.4L15.4 4.80005H18.375V6.30005H5.625ZM8.3 20.5C7.8 20.5 7.375 20.3251 7.025 19.975C6.675 19.625 6.5 19.2 6.5 18.7V7.50005H17.5V18.7C17.5 19.2 17.325 19.625 16.975 19.975C16.625 20.3251 16.2 20.5 15.7 20.5H8.3ZM8 19H16C16 19 15.9667 19 15.9 19C15.8333 19 15.7667 19 15.7 19H8.3C8.23333 19 8.16667 19 8.1 19C8.03333 19 8 19 8 19Z" fill="white" fillOpacity="0.56"/>
      </svg>
      </span>
      Remove
    </button>
  </div>
</div>
  );
};

const ContactList = () => {
  const [contacts, setContacts] = useState(dummyContacts);
  const [activeDropdown, setActiveDropdown] = useState(null);
  const [editingContact, setEditingContact] = useState(null);

  const toggleDropdown = (contactId: number, event: React.MouseEvent) => {
    event.stopPropagation();
    setActiveDropdown(activeDropdown === contactId ? null : contactId);
  };

  const handleClickOutside = (event: React.MouseEvent) => {
    if (activeDropdown !== null && !event.target.closest('.dropdown-container')) {
      setActiveDropdown(null);
    }
  };

  const handleEditContact = (contact: any) => {
    setEditingContact(contact);
    setActiveDropdown(null);
  };

  const handleSaveEdit = (updatedContact: any) => {
    setContacts(contacts.map(contact => 
      contact.id === updatedContact.id ? updatedContact : contact
    ));
    setEditingContact(null);
  };

  return (
    <div className="w-full md:w-[720px] mx-auto" onClick={handleClickOutside}>
      <ul className="space-y-4">
        {contacts.map((contact) => (
          <li key={contact.id} className="flex items-center justify-between py-4 px-4 group relative">
            <div className="flex items-center space-x-3">
              <Image 
                src={contact.image || "/profile.png"}
                alt={`${contact.name}'s profile`} 
                className="w-10 h-10 rounded-full object-cover"
                width={40}
                height={40}
              />
              <div>
                <h2 className="font-semibold text-gray-200">{contact.name}</h2>
                <p className="text-sm text-gray-500">{contact.phone}</p>
              </div>
            </div>
            <div className="flex items-center justify-evenly space-x-4 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
              <BellIcon />
              <HeadphoneIcon />
              <div className="relative dropdown-container">
                <button onClick={(e) => toggleDropdown(contact.id, e)}>
                  <ThreeDotIcon />
                </button>
                <DropdownMenu 
                  isOpen={activeDropdown === contact.id}
                  onClose={() => setActiveDropdown(null)}
                  onEdit={() => handleEditContact(contact)}
                />
              </div>
            </div>
          </li>
        ))}
      </ul>
      {editingContact && (
        <EditContactModal
          isOpen={true}
          onClose={() => setEditingContact(null)}
          onEdit={handleSaveEdit}
          contact={editingContact}
        />
      )}
    </div>
  );
};

export default ContactList;